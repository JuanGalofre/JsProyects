Para generar line-gradients https://www.quackit.com/css/functions/css_linear-gradient_function.cfm#:~:text=Linear%20gradients%20can%20go%20in,that%20runs%20between%20each%20color.

Propiedades interesantes de los tag.
  Required en el input para forzar a llenar dicho atributo
  Pattern para ajustar un regex al cual se deba adaptar lo que le pongan en el campo
  Para poder relacionar dos checkbox redondos, se les pone el mismo nombre, esto indica que se les puede presionar a los dos al mismo tiempo
  type="file" para subir archivos
  input tiene min y max.
  Para hacer dropdowns, se puede usar select, donde se ponen options. Cada opción debe tener un value
  Se le puede poner rows y columns a un textarea
Css
  Es text-align, no align-text
  todo tiene max-width, min-width, etc
  Argumentos con 4, es Top, Left, Bottom, Right
  p:last-of-type{} para en css editar el ultimo elemento
  Para adquirir todo el width del padre, se usa width:100%
  Border recibe tipo, grosor y color
Cosas que siempre se me olvidan 
  el lang va en el HTML
  el charset va en el meta

Aprendizaje del proyecto 1
  Recordar que el form facilita el submit de los valores en los inputs
  Los fieldset ayudan a dividr los campos de un form
  Hay cosa como los inputmodes= que es un atributo para un input, el cual puede   colaborarle a los browser para decidir que deberia mostrar cuando un usuario va a digitar algo en ese campo
  Los labels que dan nombre a los select, o a cualquier grupo de cosas a las que les dan nombre en el html, los envuelven:
  <label>Would you recommend freeCodeCamp to a friend
    <label><input type="radio"></label>
    <label><input type="radio"></label>
    <label><input type="radio"></label>
  </label>
  Multiple selección, se le debe poner el mismo name. Funciona más con los checkbox que con los radio-button.
CSS
  ->En general se le pone 
      width: 100%;
    height: 100vh;
  al body en el css. Con eso ocupa todo el espacio disponible
  ->Multiples elementos con las mismas reglas, se separan por ","
  ->Hay dos formas de centrar algo, desde el padre, o en el mismo objeto. En el objeto se puede usar la margin. Desde el padre se puede usar 
    .container {
      display: flex;
      justify-content: center; /* Centers the form horizontally */
      align-items: center; /* Centers the form vertically */
      height: 100vh; /* Optional: You can adjust the height as per your requirements */
    }
  como en esta ocasión lo queria usar en un body, es mejor hacerlo con la margen. Porque todo adentro del container, se vuelve flex.-> como si fuera un inline.
  -> Como estoy acostumbrado a combinar los inputs dentro de los labels, pasa algo curioso y es que queda:
      input label
    Y la idea es que quede:
      label
      input
    Como solo hay inputs en el html, los inputs se stackean uno encima de otro. Al ponerle display:block;, solo se van a separar los labels.
      input label  input label  input label

      label{ display:block;}

      input label
      input label
      input label
    Naturalmente, al hacer:
      input{ display:block; }
    Aparecerá:
      input
      label
      input
      label
      input
      label
    Aqui es importante conocer que la ubicación en el Html si importa. Si escribimos <label>Nombre<input></label>. Aparecerá:
      Nombre
      input
    Mientras que si escribimos <label><input>Nombre</label>. Aparecerá:
      input
      Nombre
      
    



